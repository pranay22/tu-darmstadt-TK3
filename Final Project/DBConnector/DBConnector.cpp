/*
 * This is based on the mySql connector c++ examples from http://dev.mysql.com/doc/connector-cpp
 */

#include <stdlib.h>
#include <iostream>
#include <string>

#include "mysql_connection.h"
#include "DBConnector.h"

#include <cppconn/driver.h>
#include <cppconn/exception.h>
#include <cppconn/resultset.h>
#include <cppconn/statement.h>
#include <cppconn/prepared_statement.h>


using namespace std;
using namespace sql::mysql;

DBConnector::DBConnector(){
	serverIP = "127.0.0.1";
	serverPort = "3306";
	user = "root";
	pass = "root";
	database ="tk3_final_project";
	roomID ="1";
}


/*
 * This expects the seat_ID(int), an occupied flag(bool) and the room ID.
 * The method then inserts the given update into the 'history' table, where the timestamp is generated by the sql server.
 * Afterward the 'seats' table is updated with the current occupied value for the given seat and room.
 */
void DBConnector::writeToDB(int seat_id, bool occupied){

	try {
	  sql::Driver *driver;
	  /* Create a connection */
	  driver = get_driver_instance();
	  //needs to be a new one everytime, it seems this is implicitly deleted somewhere or gets stuck otherwise

	  sql::Connection *con;
	  sql::Statement *stmt;
	  sql::PreparedStatement  *prep_stmt;

	  //construct connection argument
	  string conToServer = "tcp://";
	  conToServer += serverIP; conToServer +=":";
	  conToServer += serverPort;

	  con = driver->connect(conToServer, user, pass);
	  /* Connect to the MySQL server
	   *
	  This part will fail if the used mysqlppcon libraries were compiled with a different compiler than the rest of this code
	  :(
	  */

	  //Use the correct DB

	  //con->setSchema(database);
	  //use might be better here (?)
	  stmt = con->createStatement();
	  stmt->execute("USE "+ database);

	  delete stmt;
	  //should be freed explicitly

	  // Write into history table
	  string query = "INSERT INTO history(seat_id, occupied, room_id) VALUES (?, ?, ?)";
	  prep_stmt = con->prepareStatement(query);
	  // This is a prepared command string, the '?' will be replaced with the correct values in the next step

	  prep_stmt->setInt(1, seat_id);

	  string isOccupied = "false";
	  if(occupied)  isOccupied ="true";

	  prep_stmt->setString(2, isOccupied);
	  prep_stmt->setInt(3, roomID);

	  prep_stmt->execute();

	  delete prep_stmt;


	  //Write into seats table
	  query = "UPDATE seats SET occupied = ? WHERE seat_id = ? && room_id = ?";
	  prep_stmt = con->prepareStatement(query);

	  prep_stmt->setString(1, isOccupied);
	  prep_stmt->setInt(2, seat_id);
	  prep_stmt->setInt(3, roomID);

	  prep_stmt->executeUpdate();

	  delete prep_stmt;

	  delete con;

	} catch (sql::SQLException &e) {
		  cout << "# ERR: SQLException in " << __FILE__;

		  cout << "(" << __FUNCTION__ << ") on line " << __LINE__ << endl;

		  cout << "# ERR: " << e.what();
		  cout << " (MySQL error code: " << e.getErrorCode();
		  cout << ", SQLState: " << e.getSQLState() << " )" << endl;
	}
}

void DBConnector::setServerIP(std::string serverIP){
	DBConnector::serverIP = serverIP;
}

string DBConnector::getServerIP(){
	return serverIP;
}

void DBConnector::setServerPort(std::string serverPort){
	DBConnector::serverPort = serverPort;
}

string DBConnector::getServerPort(){
	return serverPort;
}

void DBConnector::setDBUser(std::string user){
	DBConnector::user = user;
}

void DBConnector::setDBPassword(std::string password){
	DBConnector::pass = password;
}

void DBConnector::setDataBase(std::string dbName){
	database = dbName;
}

void setRoomID(std::string roomID){
	DBConnector::roomID = roomID;
}

std::string getRoomID(){
	return roomID;
}

int getNumberOfSeats(){
	//The connection part is the same as in writeToDB
	try {
		  sql::Driver *driver;
		  /* Create a connection */
		  driver = get_driver_instance();
		  //needs to be a new one everytime, it seems this is implicitly deleted somewhere or gets stuck otherwise

		  sql::Connection *con;
		  sql::Statement *stmt;
		  sql::ResultSet *res;

		  int numOfSeats = 0;

		  //construct connection argument
		  string conToServer = "tcp://";
		  conToServer += serverIP; conToServer +=":";
		  conToServer += serverPort;

		  con = driver->connect(conToServer, user, pass);
		  /* Connect to the MySQL server
		   *
		  This part will fail if the used mysqlppcon libraries were compiled with a different compiler than the rest of this code
		  :(
		  */

		  //Use the correct DB

		  con->setSchema(database);
		  //use might be better here (?)

		  stmt = con->createStatement();
		  //stmt->execute("USE "+ database);

		  //get the seats!
		  res = stmt->executeQuery("SELECT 'no_of_seats' Where 'room_id' = " + roomID);

		  //It's just one value, don't use while!
		  if(res->next()){
			  numOfSeats  = res->getInt(1);
			  //TODO I have no Idea if this works!
		  }


		  delete res;
		  delete stmt;
		  delete con;
		  return numOfSeats;

	} catch (sql::SQLException &e) {
			  cout << "# ERR: SQLException in " << __FILE__;

			  cout << "(" << __FUNCTION__ << ") on line " << __LINE__ << endl;

			  cout << "# ERR: " << e.what();
			  cout << " (MySQL error code: " << e.getErrorCode();
			  cout << ", SQLState: " << e.getSQLState() << " )" << endl;
		}
}

double getCoordinate(std::string pointID, int seatID){
	//The connection part is the same as in writeToDB
		try {
			  sql::Driver *driver;
			  /* Create a connection */
			  driver = get_driver_instance();
			  //needs to be a new one everytime, it seems this is implicitly deleted somewhere or gets stuck otherwise

			  sql::Connection *con;
			  sql::PreparedStatement  *prep_stmt;
			  sql::ResultSet *res;

			  double pos = 0;

			  //construct connection argument
			  string conToServer = "tcp://";
			  conToServer += serverIP; conToServer +=":";
			  conToServer += serverPort;

			  con = driver->connect(conToServer, user, pass);
			  /* Connect to the MySQL server
			   *
			  This part will fail if the used mysqlppcon libraries were compiled with a different compiler than the rest of this code
			  :(
			  */

			  //Use the correct DB

			  con->setSchema(database);
			  //use might be better here (?)
			  //stmt->execute("USE "+ database);

			  //get generate the statement
			  string query = "SELECT "+ pointID + " Where 'seat_id' = " + ?;
			  prep_stmt = con->prepareStatement(query);

			  prep_stmt->setInt(1, seatID);

			  res =  prep_stmt->execute();

			  //It's just one value, don't use while!
			  if(res->next()){
				  pos  = res->getInt(1);
				  //TODO I have no Idea if this works!
			  }


			  delete res;
			  delete prep_stmt;
			  delete con;
			  return pos;

		} catch (sql::SQLException &e) {
				  cout << "# ERR: SQLException in " << __FILE__;

				  cout << "(" << __FUNCTION__ << ") on line " << __LINE__ << endl;

				  cout << "# ERR: " << e.what();
				  cout << " (MySQL error code: " << e.getErrorCode();
				  cout << ", SQLState: " << e.getSQLState() << " )" << endl;
			}
}

